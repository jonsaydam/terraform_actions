name: Terraform plan and auto-apply via API
description: Plan and auto-apply the TF code from workfolder input
inputs:
  TF_WORKSPACE:
    required: true
    description: The workspace name that the resources will be destroyed
  TF_ORGANIZATION:
    required:  true
    description: Organization name on Terraform Enterprise
  TF_API_TOKEN:
    required: true
    description: TOKEN to authenticate to Terraform Enterprise
  TF_HOSTNAME:
    required: true
    description: Terraform Enterprise Hostname
  BUILD_FOLDER:
    required: true
    description: Folders that has the terraform code
  TF_RUN_CODE:
    required: true
    description: The description that shows on the TFE Run
outputs:
  WORKSPACE_ID:
    description: Terraform Enterprise Workspace ID
    value: ${{ steps.plan.outputs.WORKSPACE_ID }}
  PREVIOUS_STATE_VERSION:
    description: Workspace old state version
    value: ${{ steps.plan.outputs.PREVIOUS_STATE_VERSION }}
  RUN_ID:
    description: Terraform Enterprise Workspace Run ID
    value: ${{ steps.plan.outputs.RUN_ID }}
  TFE_RUN_URL:
    description: Terraform Enterprise Run URL
    value: ${{ steps.plan.outputs.TFE_RUN_URL }}
  OUTPUT1_MESSAGE:
    description: Terraform Enterprise STATUS Message 01
    value: ${{ steps.status.outputs.OUTPUT1_MESSAGE }}
  OUTPUT2_MESSAGE:
    description: Terraform Enterprise STATUS Message 02
    value: ${{ steps.status.outputs.OUTPUT2_MESSAGE }}
  DELTA_STATE_OBJECTS:
    description: Terraform Enterprise Delta state after build
    value: ${{ steps.find_delta.outputs.DELTA_STATE_OBJECTS }}
  DELTA_STATE_OBJECTS_NUM:
    description: Number of VM created
    value: ${{ steps.find_delta.outputs.DELTA_STATE_OBJECTS_NUM }}
runs:
  using: composite
  steps:
    - uses: actions/checkout@v3

    - name: Configuration File upload
      shell: 'bash -ileo pipefail {0}'
      id: upload
      run: |
        cd ${{ inputs.BUILD_FOLDER }}
        ls -lrt
        tar -zcvf content.tar.gz *

    - name: Identify workspace ID
      shell: 'bash -ileo pipefail {0}'
      id: plan
      run: |
        cd ${{ inputs.BUILD_FOLDER }}
        ls -lrt
        WORKSPACE_ID=($(curl \
          --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          https://${{ inputs.TF_HOSTNAME }}/api/v2/organizations/${{ inputs.TF_ORGANIZATION }}/workspaces/${{ inputs.TF_WORKSPACE }} \
          | jq -r '.data.id'))

        if [ "$WORKSPACE_ID" = "null" ]; then
          log_info ""
          log_fatal "Workspace not exist"
          exit 1
        else
          log_info ""
          log_info "Workspace Found!"
          log_info "Workspace Name: ${{ inputs.TF_WORKSPACE }}"
          log_info "Workspace ID: $WORKSPACE_ID"
          echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_OUTPUT
        fi

        ### Getting the current state output ###
        current_state_version=$(curl \
        --silent \
        --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN }}" \
        --header "Content-Type: application/vnd.api+json" \
        --location \
        https://${{ inputs.TF_HOSTNAME }}/api/v2/workspaces/$WORKSPACE_ID/current-state-version | jq '.data.id' | sed 's/"//g')
        
        echo "PREVIOUS_STATE_VERSION=$current_state_version" >> $GITHUB_OUTPUT

        if  [ $current_state_version != null ]; then
          current_state_output=$(curl \
            --silent \
            --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --location \
          https://${{ inputs.TF_HOSTNAME }}/api/v2/state-versions/$current_state_version/outputs \
          | jq '.data[] | .attributes.value')

          current_state_objects=$(echo "$current_state_output" | jq '.')

        else
          log_warning "No current state"
        fi

        if [ ! -z "$current_state_objects" ]; then
          log_info "Current State Objects:"
          echo $current_state_objects | jq
        else
          log_warning "There is no VM output in the previous state"
        fi


        ### Create configuration version ###

        echo '{ "data": { "type": "configuration-versions", "attributes": { "auto-queue-runs": false }}}' > configversion.json

        log_info ""
        log_info "Creating configuration version."
        configuration_version_result=$(curl -s --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN }}" \
        --header "Content-Type: application/vnd.api+json" --data @configversion.json "https://${{ inputs.TF_HOSTNAME }}/api/v2/workspaces/${WORKSPACE_ID}/configuration-versions")

        # Parse configuration_version_id and upload_url
        config_version_id=$(echo $configuration_version_result | jq -r '.data.id')
        upload_url=$(echo $configuration_version_result | jq -r '.data.attributes."upload-url"')
        log_info ""
        log_info "Config Version ID: " $config_version_id
        log_info "Upload URL: " $upload_url

        # Write out run.template.json
        echo '{ "data": { "attributes": { "message": "${{ inputs.TF_RUN_CODE }}", "is-destroy": false }, "type": "runs", "relationships": { "workspace": { "data": { "type": "workspaces", "id": "workspace_id" }}}}}' > run.template.json


        # Upload configuration
        log_info ""
        log_info "Uploading configuration version using content.tar.gz"
        curl -s --header "Content-Type: application/octet-stream" --request PUT --data-binary @"content.tar.gz" "$upload_url"

        # Do a run
        sed "s/workspace_id/$WORKSPACE_ID/" < run.template.json  > run.json

        run_result=$(curl -s --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN  }}" --header "Content-Type: application/vnd.api+json" --data @run.json https://${{ inputs.TF_HOSTNAME }}/api/v2/runs)
        # log_debug: "Run Result:"
        # log_debug $run_result

        # Parse run_result
        run_id=$(echo $run_result | jq -r '.data.id')
        log_info ""
        log_info "Run ID: $run_id"

        echo "RUN_ID=$run_id" >> $GITHUB_OUTPUT
        echo "TFE_RUN_URL=https://${{ inputs.TF_HOSTNAME }}/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ inputs.TF_WORKSPACE }}/runs/${run_id}" >> $GITHUB_OUTPUT

        log_info "End of Planning Step"

    - name: Check Run Status
      shell: 'bash -ileo pipefail {0}'
      id: status
      run: |
        # Check run result in loop
        continue=1

        while [ $continue -ne 0 ]; do
          # Sleep
          sleep 60
          log_info ""
          log_info "Checking run status"

          # Check the status of run
          check_result=$(curl -s --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN  }}" --header "Content-Type: application/vnd.api+json" https://${{ inputs.TF_HOSTNAME }}/api/v2/runs/${{ steps.plan.outputs.RUN_ID}}?include=plan)

          # Parse out the run status and is-confirmable
          run_status=$(echo $check_result | jq -r '.data.attributes.status')
          log_info "Run Status: " $run_status
          is_confirmable=$(echo $check_result | jq -r '.data.attributes.actions."is-confirmable"')
          log_info "Run can be applied: " $is_confirmable
          # Save plan log in some cases
          save_plan="false"
        
          # Apply in some cases
          applied="false"

          if [[ "$run_status" == "planned" ]] && [[ "$is_confirmable" == "true" ]] ; then
            continue=0
            echo "Doing Apply"
            echo "OUTPUT1_MESSAGE=Doing Apply" >> $GITHUB_OUTPUT
            
            resource_addition=$(echo $check_result | jq -r '.included[0].attributes."resource-additions"')
            resource_changes=$(echo $check_result | jq -r '.included[0].attributes."resource-changes"')
            resource_destructions=$(echo $check_result | jq -r '.included[0].attributes."resource-destructions"')
            echo "OUTPUT2_MESSAGE=Plan: $resource_addition to add, $resource_changes to change, $resource_destructions to destroy."  >> $GITHUB_OUTPUT
            
            # Write out apply.json
            echo  '{"comment": "apply via API from GitHub Actions"}' > apply.json 
            apply_result=$(curl -s --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN  }}" --header "Content-Type: application/vnd.api+json" --data @apply.json https://${{ inputs.TF_HOSTNAME }}/api/v2/runs/${{ steps.plan.outputs.RUN_ID}}/actions/apply)
            applied="true"

          elif [[ "$run_status" == "errored" ]]; then
            echo "OUTPUT1_MESSAGE=Plan errored" >> $GITHUB_OUTPUT
            log_warning "Plan errored, Check the Run at ${{ steps.plan.outputs.TFE_RUN_URL }}"
            save_plan="true"
            continue=0
            exit 1

          elif [[ "$run_status" == "planned_and_finished" ]]; then
            echo "OUTPUT1_MESSAGE=Plan indicates no changes to apply." >> $GITHUB_OUTPUT
            log_warning "Plan indicates no changes to apply."
            save_plan="true"
            continue=0

          elif [[ "run_status" == "canceled" ]]; then
            echo "OUTPUT1_MESSAGE=The run was canceled." >> $GITHUB_OUTPUT
            log_warning "The run was canceled, Check the Run at ${{ steps.plan.outputs.TFE_RUN_URL }}"
            continue=0
            exit 1

          elif [[ "run_status" == "force_canceled" ]]; then
            echo "OUTPUT1_MESSAGE=The run was canceled forcefully." >> $GITHUB_OUTPUT
            log_warning "The run was canceled forcefully,Check the Run at ${{ steps.plan.outputs.TFE_RUN_URL }}"
            continue=0
            exit 1

          elif [[ "run_status" == "discarded" ]]; then
            echo "OUTPUT1_MESSAGE=The run was discarded." >> $GITHUB_OUTPUT
            log_warning "The run was discarded, Check the Run at ${{ steps.plan.outputs.TFE_RUN_URL }}"
            continue=0
            exit 1
          else
            # Sleep and then check status again in next loop
            echo "We will sleep and try again soon."
          fi
        done

        # Get the apply log and state file if an apply was done
        if [[ "$applied" == "true" ]]; then
          echo ""
          log_info "An apply was done."
          log_info "Will download apply log and state file."
          # Get run details including apply information
          check_result=$(curl -s --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN  }}" --header "Content-Type: application/vnd.api+json" https://${{ inputs.TF_HOSTNAME }}/api/v2/runs/${{ steps.plan.outputs.RUN_ID }}?include=apply)
        
          ## Get apply ID
          apply_id=$(echo $check_result | jq -r '.included[0].id')
          log_info ""
          log_info "Apply ID:" $apply_id

          ## Check apply status periodically in loop
          continue=1
          while [ $continue -ne 0 ]; do
            sleep 60
            log_info ""
            log_info "Checking apply status"
        
            # Check the apply status
            check_result=$(curl -s --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN  }}" --header "Content-Type: application/vnd.api+json" https://${{ inputs.TF_HOSTNAME }}/api/v2/applies/${apply_id})
            # Parse out the apply status
            apply_status=$(echo $check_result | jq -r '.data.attributes.status')
            log_info "Apply Status: ${apply_status}"
        
            # Decide whether to continue
            if [[ "$apply_status" == "finished" ]]; then
              log_info "Apply finished."
              echo "OUTPUT1_MESSAGE=Apply completed successfully. Check the run in Terraform Enterprise UI to review run results." >> $GITHUB_OUTPUT
              continue=0
            elif [[ "$apply_status" == "errored" ]]; then
              log_fatal "Apply errored, Check the Run at ${{ steps.plan.outputs.TFE_RUN_URL }}"
              continue=0
              exit 1
            elif [[ "$apply_status" == "canceled" ]]; then
              log_fatal "Apply was canceled, Check the Run at ${{ steps.plan.outputs.TFE_RUN_URL }}"
              continue=0
              exit 1
            else
              # Sleep and then check apply status again in next loop
              echo "We will sleep and try again soon."
            fi
          done

          # Get apply log URL
          apply_log_url=$(echo $check_result | jq -r '.data.attributes."log-read-url"')
          log_info ""
          log_info "Apply Log URL:"
          log_info "${apply_log_url}"

        #  # Retrieve Apply Log from the URL
        #  # and output to shell and file
        #  log_info ""
        #  curl -s $apply_log_url | tee ${apply_id}.log

          # Get state version ID from after the apply
          state_id=$(echo $check_result | jq -r '.data.relationships."state-versions".data[0].id')
          echo "NEW_STATE_VERSION=$state_id" >> $GITHUB_OUTPUT
          log_info ""
          log_info "State ID:" ${state_id}
          # Call API to get information about the state version including its URL and outputs
          state_file_url_result=$(curl -s --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN  }}" "https://${{ inputs.TF_HOSTNAME }}/api/v2/state-versions/${state_id}?include=outputs")
          
          num_outputs=$(echo $state_file_url_result | jq -r '.included | length')
          echo ""
          echo "Outputs from State:"

          for ((output=0;output<$num_outputs;output++))
          do
            echo $state_file_url_result | jq -r --arg OUTPUT $output '.included[$OUTPUT|tonumber].attributes'
          done

          state_file_url=$(echo $state_file_url_result | jq -r '.data.attributes."hosted-state-download-url"')
          # Get state file URL from the result
          log_info ""
          log_info "URL for state file after apply:"
          log_info ${state_file_url}
          
        #  # Retrieve state file from the URL
        #  # and output to shell and file
        #  log_info ""
        #  log_info "State file after the apply:"
        #  curl -s $state_file_url | tee ${apply_id}-after.tfstate
        fi

    - name: Find Delta Output
      id: find_delta
      shell: 'bash -ileo pipefail {0}'
      run: |
        ### PREVIOUS STATE OUTPUT ###

        log_info "Previos State version: ${{ steps.plan.outputs.PREVIOUS_STATE_VERSION }}"

        if  [ "${{ steps.plan.outputs.PREVIOUS_STATE_VERSION }}" != null ]; then
          current_state_output=$(curl \
            --silent \
            --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --location \
          https://${{ inputs.TF_HOSTNAME }}/api/v2/state-versions/${{ steps.plan.outputs.PREVIOUS_STATE_VERSION }}/outputs \
          | jq '.data[] | .attributes.value')
      
          current_state_objects=$(echo "$current_state_output" | jq '.')
      
        else
          log_info "No current state"
        fi
      
        if [ ! -z "$current_state_objects" ]; then
          log_info "Current State Objects:"
          echo $current_state_objects | jq
        else
          log_warning "There is no VM output in the previous state"
        fi
        
        if  [ ${{ steps.status.outputs.NEW_STATE_VERSION }} != null ]; then
          ### New State Output ###
          log_info "New State Version: ${{ steps.status.outputs.NEW_STATE_VERSION }}"
          new_state_output=$(curl \
            --silent \
            --header "Authorization: Bearer ${{ inputs.TF_API_TOKEN  }}" \
            --header "Content-Type: application/vnd.api+json" \
            --location \
            https://${{ inputs.TF_HOSTNAME }}/api/v2/state-versions/${{ steps.status.outputs.NEW_STATE_VERSION }}/outputs \
            | jq '.data[] | .attributes.value')
          
          new_state_objects=$(echo "$new_state_output" | jq '.')

          if [ ! -z "$new_state_objects" ]; then
            log_info "New State Objects:"
            echo $new_state_objects | jq
          else
            log_warning "There is no output for VM in the new state"
            new_state_objects=[]
          fi
        else
          log_info "There is no new state version."
          new_state_objects=$current_state_objects
        fi

        ### Delta State Output Objects ###
        if [ -n "$current_state_objects" ]; then
          
          log_info "Finding Delta Output Objects"
          delta_state_objects=$(jq -n --argjson current "$current_state_objects" --argjson new "$new_state_objects" '
            $new | map(select(. as $n | $current | any(.name == $n.name and .pip == $n.pip and .["private-ip"] == $n["private-ip"]) | not))
          ')
        else
          log_info "There was no previous output objects. Delta Output Objects are new output objects"
          delta_state_objects=$new_state_objects
        fi

        if [ ! -z "$delta_state_objects" ]; then
          log_info "Delta State Objects:"
          echo "$delta_state_objects" | jq
          delta_state_objects_num=$(echo "$delta_state_objects" | jq 'length')
          echo DELTA_STATE_OBJECTS=$delta_state_objects >> $GITHUB_OUTPUT
          
        else
          log_warning "There is no delta output for VM in the new state"
          delta_state_objects_num=0
        fi

        echo DELTA_STATE_OBJECTS_NUM=$delta_state_objects_num >> $GITHUB_OUTPUT
        log_info "Number of VM created: $delta_state_objects_num"


